{"version":3,"sources":["services/todos.ts","components/TodoForm.tsx","reducers/todoReducer.ts","components/TodoList.tsx","App.tsx","reducers/index.ts","index.tsx"],"names":["putTodo","todo","axios","put","then","res","data","initialValues","name","validationSchema","yup","shape","required","TodoForm","dispatch","useDispatch","onSubmit","values","actions","console","log","a","post","newTodo","type","payload","error","setSubmitting","isSubmitting","handleSubmit","handleChange","FormControl","TextField","label","value","onChange","variant","Button","disabled","color","Todo","ListItem","ListItemText","primary","done","ListItemSecondaryAction","IconButton","onClick","updateTodo","Done","Delete","TodoList","todos","useSelector","state","useEffect","get","List","dense","map","id","App","Grid","container","spacing","direction","item","md","src","alt","rootReducer","combineReducers","action","concat","t","store","createStore","undefined","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68e337fd.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Todo } from \"../reducers/todoReducer\";\n\nexport const addTodo = (todo: Pick<Todo, \"name\">) => {\n  return axios.post(\"/api/todos/\", todo).then(res => res.data)\n}\n\nexport const putTodo = (todo: Todo) => {\n  return axios.put(\"/api/todos/\", todo).then(res => res.data)\n}\n\nexport const getTodos = () => {\n  return axios.get(\"/api/todos/\").then(res => res.data)\n}","import React from 'react';\nimport { Formik } from \"formik\";\nimport { Button, FormControl, TextField } from '@material-ui/core';\nimport * as yup from \"yup\"\nimport { useDispatch } from 'react-redux';\nimport { createTodo } from '../reducers/todoReducer';\n\ntype FormValues = {\n  name: string;\n}\n\nconst initialValues: FormValues = {\n  name: \"\"\n}\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(\"Required TODO\")\n})\n\nconst TodoForm = () => {\n  const dispatch = useDispatch()\n  \n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n          console.log(values)\n          dispatch(createTodo(values.name))\n          actions.setSubmitting(false)\n        }}\n      >\n        {({\n          values,\n          isSubmitting,\n          handleSubmit,\n          handleChange\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <FormControl>\n              <TextField\n                label=\"TODO name\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n                variant=\"outlined\"\n              />\n            </FormControl>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Create TODO\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default TodoForm;","import { Dispatch } from \"redux\"\nimport { addTodo, getTodos, putTodo } from \"../services/todos\"\n\nexport type Todo = {\n  id: number;\n  name: string;\n  done: boolean;\n}\n\nexport type State = {\n  todos?: Todo[] | null;\n}\n\n// const CREATE_TODO = \"CREATE_TODO\"\n// const INITIALIZE = \"INITIALIZE\"\ntype CreateTodoAction = {\n  type: \"CREATE_TODO\";\n  payload: {\n    todo: Todo;\n  }\n}\ntype UpdateTodoAction = {\n  type: \"UPDATE_TODO\";\n  payload: {\n    todo: Todo;\n  }\n}\ntype InitializeAction = {\n  type: \"INITIALIZE\";\n  payload: {\n    todos: Todo[];\n  }\n}\n\nexport type TodoAction = CreateTodoAction | InitializeAction | UpdateTodoAction\n\nexport const todoReducer = (state: State = { todos: null }, action: TodoAction): State => {\n  switch (action.type) {\n    case \"INITIALIZE\":\n      return { ...state, todos: action.payload.todos }\n    case \"CREATE_TODO\":\n      const todos = state.todos ? state.todos : []\n      return { ...state, todos: todos.concat(action.payload.todo) }\n    case \"UPDATE_TODO\":\n      return {\n        ...state,\n        todos: state.todos ? state.todos.map(t => (\n          t.id === action.payload.todo.id ? action.payload.todo : t\n        )) : null,\n      }\n    default:\n      return state\n  }\n}\n\nexport const createTodo = (name: string) => {\n  return async (dispatch: Dispatch<TodoAction>) => {\n    try {\n      const newTodo = await addTodo({ name })\n      dispatch({\n        type: \"CREATE_TODO\",\n        payload: {\n          todo: newTodo,\n        },\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n}\n\nexport const updateTodo = (todo: Todo) => {\n  return async (dispatch: Dispatch<TodoAction>) => {\n    try {\n      const newTodo = await putTodo(todo)\n      dispatch({\n        type: \"UPDATE_TODO\",\n        payload: {\n          todo: newTodo,\n        },\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n}\n\nexport const initializeTodos = () => {\n  return async (dispatch: Dispatch<TodoAction>) => {\n    try {\n      const todos = await getTodos()\n      dispatch({\n        type: \"INITIALIZE\",\n        payload: {\n          todos\n        }\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n}","import { IconButton, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\nimport { Delete, Done } from '@material-ui/icons';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../reducers';\nimport { initializeTodos, Todo as TodoType, updateTodo } from '../reducers/todoReducer';\n\ntype TodoProps = {\n  todo: TodoType;\n}\n\nconst Todo: React.FC<TodoProps> = ({ todo }) => {\n  const dispatch = useDispatch()\n  const toggleDone = () => {\n    dispatch(updateTodo({ ...todo, done: !todo.done }))\n  }\n\n  return (\n    <ListItem>\n      <ListItemText\n        primary={todo.name}\n      />\n      <ListItemText\n        primary={todo.done ? \"Done\" : \"Not done\"}\n      />\n      <ListItemSecondaryAction>\n        <IconButton onClick={toggleDone}>\n          <Done />\n        </IconButton>\n        <IconButton>\n          <Delete />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nconst TodoList = () => {\n  const todos = useSelector((state: RootState) => state.todos.todos)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(initializeTodos())\n  }, [dispatch])\n\n  return (\n    <div>\n      <List dense={true}>\n        {todos && typeof todos !== \"string\" ? todos.map(todo => (\n          <Todo key={todo.id} todo={todo} />\n        )) : null}\n      </List>\n    </div>\n  );\n};\n\nexport default TodoList;","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nconst size = 6\n\nconst App = () => {\n  return (\n    <div>\n      <Grid\n        container\n        spacing={2}\n        direction=\"column\"\n      >\n        <Grid item md={size}>\n          <img src=\"/image/\" alt=\"daily\" />\n        </Grid>\n        <Grid item md={size}>\n          <TodoForm />\n        </Grid>\n        <Grid item md={4}>\n          <TodoList />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { todoReducer } from \"./todoReducer\";\n\nconst rootReducer = combineReducers({\n  todos: todoReducer,\n})\n\nexport const store = createStore(\n  rootReducer,\n  undefined,\n  applyMiddleware(thunk)\n)\n\nexport type RootState = ReturnType<typeof rootReducer>","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { store } from \"./reducers\"\nimport { Provider } from \"react-redux\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}